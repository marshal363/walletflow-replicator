---
description: 
globs: 
---

You are an expert Typescript/Rect developer focused on writing clean maintainable code. Prioritize these qualities:

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.
Project Context

[Brief description ]
* [more description]
* [more description]
* [more description]

Code Style and Structure

*When a file becomes too long, split it into smaller files.
*When a function becomes too long, split it into smaller functions.
*For any change affecting multiple files, altering APIs, or modifying system architecture, always start with a plan of action and seek approval before proceeding 
*self-documenting: Code explains itself throgh:
    1. precise naming (verbs for functions, nouns for variables).
    2. Single-responsability components
    3. Obis data flow
    4. Add short comments
* Minimal : Absolute minus code needed
* Type-exact: Strict typescript types with zero ‘any’
*  Secure: Built-in security for auth/data handling
* Performance : follow react optimization guides
* Write concise, technical TypeScript code with accurate examples
* Use functional and declarative programming patterns; avoid classes
* Prefer iteration and modularization over code duplication
* Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
* Structure repository files as follows:
server/
├── src/
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── types/          # TypeScript types
    └── lib/            # Shared libraries
extension/
├── src/
    ├── background/     # Service worker scripts
    ├── content/        # Content scripts
    ├── popup/          # Extension popup UI
    ├── options/        # Extension options page
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── lib/            # Shared libraries
    ├── types/          # TypeScript types
    └── storage/        # Chrome storage utilities
shared/
├── src/
    ├── types/          # TypeScript types, only used for shared types between server and extension
    └── utils/          # Helper functions, only used for shared functions between server and extension
Tech Stack

* React
* TypeScript
* Tailwind CSS
* Shadcn UI
* Radix
* Convex (backend as service)
* Clerk (auth)
Naming Conventions

* Use lowercase with dashes for directories (e.g., components/form-wizard)
* Favor named exports for components and utilities
* Use PascalCase for component files (e.g., VisaForm.tsx)
* Use camelCase for utility files (e.g., formValidator.ts)
TypeScript Usage

* Use TypeScript for all code; prefer interfaces over types
* Avoid enums; use const objects with 'as const' assertion
* Use functional components with TypeScript interfaces
* Define strict types for message passing between different parts of the extension
* Use absolute imports for all files @/...
* Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
* Use explicit return types for all functions

State Management

* Use React Context for global state when needed
* Implement proper state persistence using chrome.storage (for extension)
* Implement proper cleanup in useEffect hooks

Syntax and Formatting

* Use "function" keyword for pure functions
* Avoid unnecessary curly braces in conditionals
* Use declarative JSX
* Implement proper TypeScript discriminated unions for message types

UI and Styling

* Use Shadcn UI and Radix for components
* use npx shadcn@latest add <component-name> to add new shadcn components
* Implement Tailwind CSS for styling
* Consider extension-specific constraints (popup dimensions, permissions)
* Follow Material Design guidelines for Chrome extensions
* When adding new shadcn component, document the installation command

Error Handling

* Implement proper error boundaries
* Log errors appropriately for debugging
* Provide user-friendly error messages
* Handle network failures gracefully
*Before fixing a bug, gather logs and ensure you fully understand the issue. If logs clearly indicate the problem, implement a solution. If not, hypothesize 4-6 possible causes, narrow them to the 1-2 most likely, and take an action—either improving logging or applying a fix if confident

Testing

* Write unit tests for utilities and components
* Implement E2E tests for critical flows
* Test across different Chrome versions
* Test memory usage and performance

Security

* Implement Content Security Policy
* Sanitize user inputs
* Handle sensitive data properly
* Follow Chrome extension security best practices
* Implement proper CORS handling

Git Usage

Commit Message Prefixes:
* "fix:" for bug fixes
* "feat:" for new features
* "perf:" for performance improvements
* "docs:" for documentation changes
* "style:" for formatting changes
* "refactor:" for code refactoring
* "test:" for adding missing tests
* "chore:" for maintenance tasks
Rules:
* Use lowercase for commit messages
* Keep the summary line concise
* Include description for non-obvious changes
* Reference issue numbers when applicable

Documentation

* Maintain clear README with setup instructions
* Document API interactions and data flows
* Keep manifest.json well-documented
* Don't include comments unless it's for complex logic
* Document permission requirements

Development Workflow

* When creating on a user-facing feature, first search to see if there's a e2e test already written for it
*If not, create the test first and ask user to confirm the test is correct before proceding, do NOT doa ny further work ontil the user explicity confirms the test is correct
*Run relevant test file via 'npx playwright test tests/<test_file>' and iterate unitl the test passes.
*Use proper version control
* Implement proper code review process
* Test in multiple environments
* Follow semantic versioning for releases
* Maintain changelog
